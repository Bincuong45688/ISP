package com.example.isp.controller;

import com.example.isp.config.SecurityRoles;
import com.example.isp.dto.RitualCreateDTO;
import com.example.isp.dto.RitualUpdateDTO;
import com.example.isp.model.enums.Ritual;
import com.example.isp.service.RitualService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/ritual")
@RequiredArgsConstructor
@Tag(name = "Ritual Management", description = "Qu·∫£n l√Ω nghi l·ªÖ ‚Äî xem, t·∫°o, s·ª≠a, x√≥a")
public class RitualController {

    private final RitualService ritualService;

    // üë§ Public
    @Operation(
            summary = "L·∫•y t·∫•t c·∫£ nghi l·ªÖ (Public)",
            description = "Tr·∫£ v·ªÅ danh s√°ch t·∫•t c·∫£ nghi l·ªÖ ƒëang ho·∫°t ƒë·ªông. Ng∆∞·ªùi d√πng kh√¥ng c·∫ßn ƒëƒÉng nh·∫≠p."
    )
    @GetMapping
    public ResponseEntity<List<Ritual>> getAll() {
        return ResponseEntity.ok(ritualService.getAllRituals());
    }

    @Operation(
            summary = "L·∫•y nghi l·ªÖ theo ID (Public)",
            description = "Tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt c·ªßa m·ªôt nghi l·ªÖ theo ID."
    )
    @GetMapping("/{id}")
    public ResponseEntity<Ritual> getById(@PathVariable Long id) {
        return ResponseEntity.ok(ritualService.getRitualById(id));
    }

    @Operation(
            summary = "L·∫•y nghi l·ªÖ theo v√πng mi·ªÅn (Public)",
            description = "Tr·∫£ v·ªÅ danh s√°ch nghi l·ªÖ theo v√πng mi·ªÅn. Ng∆∞·ªùi d√πng kh√¥ng c·∫ßn ƒëƒÉng nh·∫≠p."
    )
    @GetMapping("/region/{region}")
    public ResponseEntity<List<Ritual>> getByRegion(@PathVariable String region) {
        return ResponseEntity.ok(ritualService.getRitualsByRegion(region));
    }


    @Operation(
            summary = "T·∫°o nghi l·ªÖ m·ªõi (STAFF)",
            description = "Ch·ªâ t√†i kho·∫£n c√≥ quy·ªÅn STAFF m·ªõi ƒë∆∞·ª£c ph√©p t·∫°o nghi l·ªÖ m·ªõi.",
            security = @SecurityRequirement(name = "bearerAuth")
    )
    @PreAuthorize(SecurityRoles.STAFF)
    @PostMapping
    public ResponseEntity<Ritual> create(@RequestBody RitualCreateDTO dto) {
        Ritual ritual = new Ritual();
        ritual.setRitualName(dto.getRitualName());
        ritual.setDescription(dto.getDescription());
        ritual.setRegion(dto.getRegion());
        ritual.setActive(dto.isActive());
        return ResponseEntity.ok(ritualService.createRitual(ritual));
    }

    @Operation(
            summary = "C·∫≠p nh·∫≠t nghi l·ªÖ (STAFF)",
            description = "Ch·ªâ t√†i kho·∫£n c√≥ quy·ªÅn STAFF m·ªõi ƒë∆∞·ª£c ph√©p ch·ªânh s·ª≠a nghi l·ªÖ.",
            security = @SecurityRequirement(name = "bearerAuth")
    )
    @PreAuthorize(SecurityRoles.STAFF)
    @PutMapping("/{id}")
    public ResponseEntity<Ritual> update(@PathVariable Long id, @RequestBody RitualUpdateDTO dto) {
        Ritual ritual = new Ritual();
        ritual.setRitualName(dto.getRitualName());
        ritual.setDescription(dto.getDescription());
        ritual.setRegion(dto.getRegion());
        ritual.setActive(dto.isActive());
        return ResponseEntity.ok(ritualService.updateRitual(id, ritual));
    }

    @Operation(
            summary = "X√≥a nghi l·ªÖ (STAFF)",
            description = "Ch·ªâ t√†i kho·∫£n c√≥ quy·ªÅn STAFF m·ªõi ƒë∆∞·ª£c ph√©p x√≥a nghi l·ªÖ.",
            security = @SecurityRequirement(name = "bearerAuth")
    )
    @PreAuthorize(SecurityRoles.STAFF)
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> delete(@PathVariable Long id) {
        ritualService.deleteRitual(id);
        return ResponseEntity.noContent().build();
    }
}
